# go

함수형 프로그래밍에서는 코드를 값으로 다루는 아이디어를 많이 사용한다. 코드를 값으로 사용할 수 있기 때문에 어떠한 함수가 코드인 함수를 받아서 평가하는 시점을 원하는대로 다룰수가 있기 때문에 코드의 표현력을 높일 수 있다.

```jsx
const products = [
    {name: '반팔티', price: 15000},
    {name: '긴팔티', price: 20000},
    {name: '핸드폰케이스', price: 15000},
    {name: '후드티', price: 30000},
    {name: '바지', price: 25000}
  ];

  const add = (a, b) => a + b;

  console.log(
    reduce(
      add,
      map(p => p.price,
        filter(p => p.price < 20000, products))));
  console.clear();

```

저번 강의에서 만들었던 코드는 함수가 계속해서 중첩되어 있어서 읽기에 좋지 않다.

### go 함수 만들기

```
go(
    0,
    a => a+1,
    a => a+10,
    a => a+100,
    log);

```

**go 함수는 인자로 함수들을 받아 차례로 실행시켜 결과에 해당하는 값을 리턴하는 함수이다.** 첫번째 파라미터를 중첩에서 +1 +10 +100 해서 출력하는 함수로 만들겠습니다. 기본적으로 go함수는 인자들(`0`,`a => a+1`, `a=> a+10`,...)통해서 하나의 값으로 축약해 나가면 된다. 해당 인자들을 list라고 생각하면 전개연산자를 사용할 수 있다.

```jsx
//list 사용한 go 함수 구현
const go = (list) =>{
    log(list);
}

go([0,
    a => a+1,
    a => a+10,
    a => a+100,
    log]);

//전개 연산자 사용한 go함수
const go = (...args) =>{
    log(args);
}

go(0,
    a => a+1,
    a => a+10,
    a => a+100,
    log);

```

이 인자들을 이용해서 첫번째 인자를 그 다음 함수로 전달하고, 함수의 결과를 그 다음 함수로 전달하면서 계속해서 연속적으로 하나의 일을 해야한다. 그렇다는 것은 이 로직은 `reduce`라고 할 수 있다.

그렇다는 것은 args를 어떠한 함수로 축약해서 하나의 값으로 만들어가는 것으로 볼수 있다. 결국 go 함수는 reduce로 구현할 수 있다.

```jsx
//reduce로 구현한 go함수
const go = (...args) => reduce((a, f) => f(a), args);

go(0,
    a => a+1,
    a => a+10,
    a => a+100,
    log);

```

결국 reduce를 활용하면 특정 리스트를 축약해나가는 코드를 작성할때 용이하다.

### go를 사용하여 읽기 좋은 코드 만들기

go를 배웠으니 이전에 사용했던 함수를 go를 이용해서 가독성 좋게 만들 수 있다.

```jsx
const products = [
    {name: '반팔티', price: 15000},
    {name: '긴팔티', price: 20000},
    {name: '핸드폰케이스', price: 15000},
    {name: '후드티', price: 30000},
    {name: '바지', price: 25000}
  ];

const add = (a, b) => a + b;
/*
console.log(
reduce(
    add,
    map(p => p.price,
    filter(p => p.price < 20000, products))));
*/
go(
    products,
    products => filter(p => p.price <20000, products),
    products => map(p => p.price, products),
    prices => reduce(add, prices),
    log);

```

코드의 길이는 늘었지만 가독성은 훨씬 좋아졌다.

# pipe

**pipe함수는 함수를 리턴하는 함수이다.** 다시말해서 pipe함수는 함수들이 나열되어 있는 합성된 함수를 만드는 함수이다. 먼저 빈 파이프 함수를 만들어 보자`const pipe = () => {};`(빈 함수). 결과적으로 pipe함수는 아래와 같이 사용될 것이다.

```jsx
const f = pipe(
    a => a+1,
    a => a+10,
    a => a+100);
//인자로 들어간 3개의 함수를 순차적으로 실행하게 하는 함수를 리턴하는 함수

```

기본적으로 pipe함수는 함수를 리턴하는 함수이므로 아까 만들었던 빈 함수를 함수를 리턴하는 구조로 바꿔야한다.

```jsx
const pipe = () => {}; //그냥 함수 내용만 실행하는 함수, 어떤것이 리턴될지 모른다.
const pipe = () => () => {}; //이처럼 구조를 만들면 pipe함수는 함수를 리턴하는 구조

```

pipe함수는 내부적에서 go함수를 사용하는 함수이다. 처음엔 함수들을 받고(pipe함수의 인자들) 나중에 인자(pipe함수가 리턴해주는 함수의 인자)를 받는다. 받은 인자를 go함수를 실행하면서 함수들을 주면 이와 같이 구조가 바뀐다.`const pipe = (...fs) => (a) => go(a, ...fs);`

만약에 `add(a,b)`라는 함수가 있고 시작할 때 go함수의 경우 시작하는 함수의 인자가 2개인 경우가 있을 수 있다.

```jsx
go(add(0,1),
    a=>a+1,
    a=>a+10,
    a=>a+100,
    log);

```

위 코드에서 `add(0,1)`은 1이라는 값으로 평가되기 때문에 문제가 없지만 pipe함수에서 사용할 때는 `f(add(0,1))`로 전달해야하기 때문에 보기 좋지 않다. 이 것을 `F(0,1)`로 전달하기 위해서는 pipe함수의 구조를 아래와 같이 바궈줘야한다.

```jsx
//아래처럼 pipe함수의 구조(함수인자의 갯수)를 바꿔주면 된다.
const pipe = (f, ...fs) => (...as) => go(f(...as), ...fs);

const f = pipe(
    (a,b) => a+b,
    a=>a+10,
    a=>a+100);

log(f(0,1))

```

# curry

**curry함수는 함수를 값으로 다루면서 받아논 함수를 내가 원하는 시점에 평가하는 함수이다.** 함수를 받아서 함수를 리턴하고, 인자를 받아서 인자가 원하는 갯수만큼의 인자가 들어왔을때 받아논 함수를 나중에 평가시키는 함수이다.

간단한 코드로 curry의 구조를 설명해보면 커리하는 함수를 먼저 함수를 받아서 함수를 리턴한다.

`const curry = f => () => {};`

그리고 리턴하는 함수에서는 f함수에서 사용할 인자를 대신해서 받아본다. 아래와 같이 만드면 첫번째 인자(`a`)와 나머지인자들(`..._`)들을 받게 된다.

`const curry = f => (a, ..._) => {};`

이렇게 되었을때, 리턴하는 함수에 인자가 2개이상 전달되었다는 것을 뜻하는 것은 `_.length` 값이 있다는것을 뜻한다.(인자가 하나라면 a 인자에만 값이 있을 것이다.)

그래서 `_.length`가 있다면 받아논 함수(f 함수)를 즉시 실행하고 아니라면 다시 함수를 리턴한다. 리턴한 함수는 이후에 다시 인자가 들어오면 인후에 들어온인자와 함께 실행하는 함수를 리턴한다.

```jsx
const curry = f => (a,..._) => _.length ? f(a, ..._) : (..._) => f(a, ..._);

```

위 코드처럼 함수의 구조가 완성되었다. 실제로 curry를 활용한 코드는 아래와 같다.

```jsx
const mult = (a,b) => a*b;
//2개의 인자를 받아서 곱한 후 리턴하는 함수를 curry함수의 인자로 넣을 수 있다.
const mul = curry((a,b) => a*b);
log(mul(3));  // (..._) => (3, ..._)
log(mul(3)(2)); // 6

const mult3 = mult(3);
log(mult3(10)); //30
log(mult3(5));  //15
log(mult3(3));  //9

```

# 함수 조합으로 함수 만들기

아래와 같은 데이터를 가지고 2가지의 일을 하는 코드(함수)가 있다. pipe라인으로 만들어진 코드들을 조합해서 중복을 쉽게 제거할 수 있다.

```jsx
 const products = [
    {name: '반팔티', price: 15000},
    {name: '긴팔티', price: 20000},
    {name: '핸드폰케이스', price: 15000},
    {name: '후드티', price: 30000},
    {name: '바지', price: 25000}
  ];

go(
    products,
    filter(p => p.price < 20000),
    map(p => p.price),
    reduce(add),
    log);
go(
    products,
    filter(p => p.price >= 20000),
    map(p => p.price),
    reduce(add),
    log);

```

1. total_price함수 만들기
    
    2개의 go함수 코드에서 map(), reduce() 부분을 중복되므로 하나의 pipe함수로 만들 수 있다.
    
    ```jsx
    const total_price = pipe(
        map(p => p.price),
        reduce(add));
    
    go(
        products,
        filter(p => p.price < 20000),
        total_price,
        log);
    go(
        products,
        filter(p => p.price >= 20000),
        total_price,
        log);
    
    ```
    
2. base_total_price 만들기
    
    위 코드의 상태에서 filter의 조건을 제외하면 또다시 중복이 일어나게 된다. 해당 부분도 아래와 같이 함수로 만들수 있다.
    
    ```jsx
    const total_price = pipe(
        map(p => p.price),
        reduce(add));
    
    const base_total_price = predi => pipe(
        filter(predi),
        total_price);
    
    go(
        products,
        base_total_price(p => p.price < 20000),
        log);
    go(
        products,
        base_total_price(p > p.price >= 20000),
        log);
    
    ```
    

이런식으로 함수형 프로그래밍에서는 고차함수들을 함수의 조합으로만들거 가면서 잘게 나뉘어진 함수들을 나누면서 중복을 제거하고 다른 곳에서도 사용할 수 있게 만들 수 있다.