코어 자바스크립트
01 데이터 타입
01 데이터 타입의 종류
- 기본형(원시형, primitive type)
    - 할당이나 연산시 값이 담긴 주소값을 복제
    - 불변성(immutability)
    - 종류
        - 숫자(number)
        - 문자열(string)
        - 불리언(boolean)
        - null
        - undifined
        - --------------------ES6
        - 심볼(Symbol)
- 참조형(reference type)
    - 할당이나 연산시 값이 담긴 주솟값들로 이루어진 묶음을 가리키는 주솟값을 복제
    - 종류
        - 객체(object)
        - 배열(Array)
        - 함수(Function)
        - 날짜(Data)
        - 정규표현식(RegExp)
        - --------------------ES6
        - Map
        - WeakMap
        - Set
        - WeakSet

02 데이터 타입에 관한 배경지식
02-1 메모리와 데이터
    - 비트: 0 or 1 로 표현할 수 있는 하나의 메모리 조각
    - 바이트: 8비트
    - 모든 데이터는 바이트 단위의 식별자, 더 정확하게는 메모리 주솟값(memory address)을 통해 서로 구분하고 연결할 수 있음

02-2 식별자와 변수
    - 변수
        - 별할 수 있는 무언가(=데이터)
    - 식별자
        - 어떤 데이터를 식별하는 데 사용하는 이름 → 변수명

03 변수 선언과 데이터 할당
03-1 변수 선언
    - var a;
    - 변할 수 있는 데이터를 만든다. 이 데이터의 식별자는 a로 한다.
    - 변수: 변경 가능한 데이터가 담길 수 있는 공간 or 그릇

03-2 데이터 할당
    - var a;                // 변수 a 선언
    - a = 'abc';         // 변수 a에 데이터 할당
    - var a = 'abc'   // 변수 선언과 할당을 한 문장으로 표현
￼
    - 변수 영역에 값을 직접 대입하지 않고 굳이 번거롭게 한 단계를 더 거치는 이유
        - 데이터 변환을 자유롭게 하기 위해
        - 메모리를 더욱 효율적으로 관리하기 위해
￼

04 기본형 데이터와 참조형 데이터
04-1 불변값
    - 변수(variable)와 상수(constant)를 구분하는 성질 = 변경 가능성
    - 성질
        - 변경은 새로운 동작을 통해서만 이뤄짐
            - 문자열 값도, 숫자 값도 다른 값으로 변경할 수 없음
            - 저장된 값이 있으면 재활용하고, 없으면 새로 만들어 사용할 뿐

04-2 가변값
var obj1 = {
a: 1,
b: 'bbb'
};
￼
obj1.a = 2;

    - 객체의 변수 영역이 별도로 존재함
        - 객체는 변수 영역만 별도의 공간으로 할애함
        - 다른 데이터를 사용해도 데이터 영역은 기존의 메모리 공간을 그대로 활용함
        - 데이터 영역에 저장된 값은 모두 불변값

    - 참조 카운트: 어떤 데이터에 대해 자신의 주소를 참조하는 변수의 개수
    - 참조 카운트가 0인 메모리 주소는 가비지 컬렉터(garbage collector)의 수거 대상이 됨
    - 수거된 메모리는 다시 새로운 값을 할당할 수 있는 빈 공간이 됨

04-3 변수 복사 비교
var a = 10;
var b = a;
var obj1  = {c: 10, d: 'ddd'};
var obj2 = obj1;
￼
b = 15;
obj2.c = 20;

    - a !== b 이지만
    - obj1 === obj2 이다
    - 기본형도 결국 주솟값을 참조함
    - 기본형은 주솟값을 복사하는 과정이 한 번만 이뤄지고, 참조형은 한 단계를 더 거치게 됨

05 불변 객체
05-1 불변 객체를 만드는 간단한 방법
    - 불변 객체(immutable object):
    - 불변객체가 필요한 경우
        - 값으로 전달받은 객체는 변경이 가능하더라도, 원복 객체는 변하면 안되는 경우
